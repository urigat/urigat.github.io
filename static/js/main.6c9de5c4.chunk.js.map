{"version":3,"sources":["components/app/components/top-header/top-header.module.css","components/app/components/text-card/components/text-card-body/components/reading-text-container/components/text-line/text-line.module.css","components/app/components/text-card/components/functional-buttons/components/functional-buttons-container/components/delete-text/delete-text.module.css","components/app/components/text-card/components/functional-buttons/components/functional-buttons-container/components/start-read/start-read.module.css","components/app/app.module.css","components/app/components/controllers-container/controllers-container.module.css","components/app/components/controllers-container/components/font-size-controller/font-size-controller.module.css","components/app/components/controllers-container/components/font-size-controller/components/controller-container/controller-container.module.css","components/app/components/controllers-container/components/font-size-controller/components/controller-title/controller-title.module.css","components/app/components/controllers-container/components/speed-controller/speed-controller.module.css","components/app/components/controllers-container/components/speed-controller/components/controller-container/controller-container.module.css","components/app/components/controllers-container/components/speed-controller/components/controller-title/controller-title.module.css","components/app/components/text-card/text-card.module.css","components/app/components/text-card/components/text-card-body/text-card-body.module.css","components/app/components/text-card/components/text-card-body/components/reading-text-container/reading-text-container.module.css","components/app/components/text-card/components/text-card-header/text-card-header.module.css","components/app/components/text-card/components/text-card-header/components/text-card-title/text-card-title.module.css","components/app/components/text-card/components/text-card-header/components/text-size-controler/text-size-controler.module.css","components/app/components/text-card/components/functional-buttons/functional-buttons.module.css","components/app/components/text-card/components/functional-buttons/components/functional-buttons-container/functional-buttons-container.module.css","actions/index.ts","components/app/components/top-header/top-header.tsx","stores/state-store.ts","components/app/components/controllers-container/components/font-size-controller/components/controller-container/components/controller/controller.tsx","components/app/components/controllers-container/components/font-size-controller/components/controller-container/controller-container.tsx","components/app/components/controllers-container/components/font-size-controller/components/controller-title/controller-title.tsx","components/app/components/controllers-container/components/font-size-controller/font-size-controller.tsx","components/app/components/controllers-container/components/speed-controller/components/controller-container/components/controller/controller.tsx","components/app/components/controllers-container/components/speed-controller/components/controller-container/controller-container.tsx","components/app/components/controllers-container/components/speed-controller/components/controller-title/controller-title.tsx","components/app/components/controllers-container/components/speed-controller/speed-controller.tsx","components/app/components/controllers-container/controllers-container.tsx","components/app/components/text-card/components/text-card-body/components/reading-text-container/components/text-line/text-line.tsx","components/app/components/text-card/components/text-card-body/components/reading-text-container/reading-text-container.tsx","components/app/components/text-card/components/text-card-body/text-card-body.tsx","components/app/components/text-card/components/functional-buttons/components/functional-buttons-container/components/delete-text/delete-text.tsx","components/app/components/text-card/components/functional-buttons/components/functional-buttons-container/components/start-read/start-read.tsx","components/app/components/text-card/components/functional-buttons/components/functional-buttons-container/functional-buttons-container.tsx","components/app/components/text-card/components/functional-buttons/functional-buttons.tsx","components/app/components/text-card/text-card.tsx","components/app/app.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["module","exports","_interval","TopHeader","props","className","top_header","top_header_text","stateStore","_readingSpeed","_textareaText","_showTextarea","_highlightClassIndex","textareaTextToReadingWordsPage","textareaText","_wordCounter","split","map","rawReadingLine","clearLine","str","_word","text","index","textLine","filter","word","makeAutoObservable","this","newReadingSpeed","newReadingText","newShowTextarea","newHighlightClassIndex","start","action","stop","highlightClassIndex","setInterval","document","querySelector","readingSpeed","clearInterval","Controller","Slider","onChange","event","value","newFontSize","querySelectorAll","forEach","element","style","fontSize","track","step","defaultValue","valueLabelDisplay","max","min","ControllerContainer","controller_container","ControllerTitle","controller_title","FontSizeController","observer","font_size_controller","SpeedController","speed_controller","ControllersContainer","controllers_container","TextLine","line","text_line","data-dynamic-text","input_text","backgroundColor","id","ReadingTextContainer","readingTextWords","reading_text_container","TextCardBody","showTextarea","onTextareaChange","target","text_card_body","rows","cols","newText","DeleteText","onClick","delete_text","selected","startRead","StartRead","start_read","FunctionalButtonsContainer","functional_buttons_container","FunctionalButtons","functional_buttons","TextCard","text_card","App","app","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.6c9de5c4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"top_header\":\"top-header_top_header__2C-e2\",\"top_header_text\":\"top-header_top_header_text__U9IiL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text_line\":\"text-line_text_line__3BXHI\",\"input_text\":\"text-line_input_text__2Vkgw\",\"yellow_background_color\":\"text-line_yellow_background_color__3jmZo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"delete_text\":\"delete-text_delete_text__3Z9tu\",\"selected\":\"delete-text_selected__5eaYm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"start_read\":\"start-read_start_read__gt3y0\",\"selected\":\"start-read_selected__AHwWy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"app_app__M9MMq\",\"app_header\":\"app_app_header__1RS7_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"controllers_container\":\"controllers-container_controllers_container__3_JtV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"font_size_controller\":\"font-size-controller_font_size_controller__2pyjv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"controller_container\":\"controller-container_controller_container__2Awjf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"controller_title\":\"controller-title_controller_title__1fNwf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"speed_controller\":\"speed-controller_speed_controller__20Xpq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"controller_container\":\"controller-container_controller_container__39ubE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"controller_title\":\"controller-title_controller_title__1sj-v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text_card\":\"text-card_text_card__21cva\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text_card_body\":\"text-card-body_text_card_body__Mw8XI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"reading_text_container\":\"reading-text-container_reading_text_container__1SabP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text_card_header\":\"text-card-header_text_card_header__1xr9L\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text_card_title\":\"text-card-title_text_card_title__3rMTo\",\"text_card_title_first_span\":\"text-card-title_text_card_title_first_span__11Bep\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text_size_controler\":\"text-size-controler_text_size_controler__1QZky\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"functional_buttons\":\"functional-buttons_functional_buttons__hLKJY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"functional_buttons_container\":\"functional-buttons-container_functional_buttons_container__t2p44\"};","import { action } from \"mobx\";\nimport { stateStore } from \"@aspects/stores\";\n\nlet _interval: NodeJS.Timeout;\n\nexport const start = action(() => {\n    stop();\n    stateStore.highlightClassIndex = 0;\n    _interval = setInterval(() => {\n        if (document.querySelector(`#word-${stateStore.highlightClassIndex}`)) {\n            stateStore.highlightClassIndex++;\n        } else {\n            stop();\n        }\n    }, (60 / stateStore.readingSpeed) * 1000);\n});\n\nexport const stop = () => {\n    clearInterval(_interval);\n    stateStore.highlightClassIndex = -1;\n};\n\nexport const changeFontSize = (newFontSize: number) => {\n    document.querySelectorAll(\"span[data-dynamic-text]\").forEach(\n        // @ts-ignore\n        (element) => (element.style.fontSize = `${newFontSize}px`)\n    );\n};\n","import React from \"react\";\n\n// @ts-ignore\nimport { top_header, top_header_text } from \"./top-header.module.css\";\nimport { BoyWithBookOnTheHead, GirlReading } from \"./assets\";\n\nexport type TopHeaderProps = {};\n\nexport const TopHeader = (props: TopHeaderProps) => {\n    return (\n        <div className={top_header}>\n            {/* <div>\n        <GirlReading />\n      </div> */}\n            <div className={top_header_text}>המקראה של רוחה</div>\n            {/* <div>\n        <BoyWithBookOnTheHead />\n      </div> */}\n        </div>\n    );\n};\n","import { makeAutoObservable } from \"mobx\";\n\nexport type Word = { text: string; index: number };\nexport type ReadingWordLine = Array<Word>;\nexport type ReadingWordPage = Array<ReadingWordLine>;\n\nclass StateStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    private _readingSpeed: number = 20;\n    get readingSpeed(): number {\n        return this._readingSpeed;\n    }\n    set readingSpeed(newReadingSpeed: number) {\n        this._readingSpeed = newReadingSpeed;\n    }\n\n    private _textareaText: string = \"\";\n    get textareaText(): string {\n        return this._textareaText;\n    }\n    set textareaText(newReadingText: string) {\n        this._textareaText = newReadingText;\n    }\n\n    get readingTextWords(): ReadingWordPage {\n        return this.textareaTextToReadingWordsPage(this._textareaText);\n    }\n\n    private _showTextarea: boolean = true;\n    get showTextarea(): boolean {\n        return this._showTextarea;\n    }\n    set showTextarea(newShowTextarea: boolean) {\n        this._showTextarea = newShowTextarea;\n    }\n\n    private _highlightClassIndex: number = -1;\n    get highlightClassIndex(): number {\n        return this._highlightClassIndex;\n    }\n    set highlightClassIndex(newHighlightClassIndex: number) {\n        this._highlightClassIndex = newHighlightClassIndex;\n    }\n\n    // UTILS:\n    private textareaTextToReadingWordsPage = (\n        textareaText: string\n    ): ReadingWordPage => {\n        let _wordCounter = 0;\n\n        const rawReadingLines: string[] = textareaText.split(\"\\n\");\n        const _readingPage: ReadingWordPage = rawReadingLines.map(\n            (rawReadingLine) => {\n                const _clearLine = this.clearLine(rawReadingLine);\n                const _readingLine: ReadingWordLine = _clearLine.map((str) => {\n                    const _word: Word = {\n                        text: str,\n                        index: _wordCounter,\n                    };\n\n                    _wordCounter++;\n                    return _word;\n                });\n\n                return _readingLine;\n            }\n        );\n\n        return _readingPage;\n    };\n\n    clearLine = (textLine: string): Array<string> => {\n        return textLine.split(\" \").filter((word) => word !== \"\");\n    };\n}\n\nexport const stateStore = new StateStore();\n","import React from \"react\";\nimport Slider from \"@material-ui/core/Slider\";\nimport { stateStore } from \"@aspects/stores\";\n\nimport \"./controller.css\";\nimport { changeFontSize } from \"@aspects/actions\";\n\nexport type ControllerProps = {};\nexport const Controller = (props: ControllerProps) => {\n    const onChange = (\n        event: React.ChangeEvent<{}>,\n        value: number | number[]\n    ) => {\n        //@ts-ignore\n        changeFontSize(value);\n    };\n\n    return (\n        <div>\n            <Slider\n                onChange={onChange}\n                track=\"inverted\"\n                step={5}\n                defaultValue={30}\n                valueLabelDisplay=\"on\"\n                max={50}\n                min={10}\n            />\n        </div>\n    );\n};\n","import React from \"react\";\n\n// @ts-ignore\nimport { controller_container } from \"./controller-container.module.css\";\n\nimport { Controller } from \"./components\";\n\nexport type ControllerContainerProps = {};\n\nexport const ControllerContainer = (props: ControllerContainerProps) => {\n  return (\n    <div className={controller_container}>\n      <Controller />\n    </div>\n  );\n};\n","import React from \"react\";\n\n// @ts-ignore\nimport { controller_title } from \"./controller-title.module.css\";\n\nexport type ControllerTitleProps = {};\n\nexport const ControllerTitle = (props: ControllerTitleProps) => {\n  return (\n    <div className={controller_title}>\n      <span>גודל טקסט</span>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\n\n// @ts-ignore\nimport { font_size_controller } from \"./font-size-controller.module.css\";\n\nimport { ControllerContainer, ControllerTitle } from \"./components\";\n\nexport type FontSizeControllerProps = {};\n\nexport const FontSizeController = observer((props: FontSizeControllerProps) => {\n    return (\n        <div className={font_size_controller}>\n            <div>\n                <ControllerTitle />\n            </div>\n            <div>\n                <ControllerContainer />\n            </div>\n        </div>\n    );\n});\n","import React from \"react\";\nimport Slider from \"@material-ui/core/Slider\";\nimport { stateStore } from \"@aspects/stores\";\n\nimport \"./controller.css\";\n\nexport type ControllerProps = {};\nexport const Controller = (props: ControllerProps) => {\n  const onChange = (event: React.ChangeEvent<{}>, value: number | number[]) => {\n    // console.log(value);\n    // @ts-ignore\n    stateStore.readingSpeed = value;\n  };\n\n  return (\n    <div>\n      <Slider\n        onChange={onChange}\n        track=\"inverted\"\n        step={5}\n        defaultValue={30}\n        valueLabelDisplay=\"on\"\n        max={50}\n        min={10}\n      />\n    </div>\n  );\n};\n","import React from \"react\";\n\n// @ts-ignore\nimport { controller_container } from \"./controller-container.module.css\";\n\nimport { Controller } from \"./components\";\n\nexport type ControllerContainerProps = {};\n\nexport const ControllerContainer = (props: ControllerContainerProps) => {\n  return (\n    <div className={controller_container}>\n      <Controller />\n    </div>\n  );\n};\n","import React from \"react\";\n\n// @ts-ignore\nimport { controller_title } from \"./controller-title.module.css\";\n\nexport type ControllerTitleProps = {};\n\nexport const ControllerTitle = (props: ControllerTitleProps) => {\n  return (\n    <div className={controller_title}>\n      <span>מהירות קריאה</span>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\n\n// @ts-ignore\nimport { speed_controller } from \"./speed-controller.module.css\";\n\nimport { ControllerContainer, ControllerTitle } from \"./components\";\n\nexport type SpeedControllerProps = {};\n\nexport const SpeedController = observer((props: SpeedControllerProps) => {\n    return (\n        <div className={speed_controller}>\n            <div>\n                <ControllerTitle />\n            </div>\n            <div>\n                <ControllerContainer />\n            </div>\n        </div>\n    );\n});\n","import React from \"react\";\n\n// @ts-ignore\nimport { controllers_container } from \"./controllers-container.module.css\";\nimport { FontSizeController, SpeedController } from \"./components\";\n\nexport type ControllersContainerProps = {};\n\nexport const ControllersContainer = (props: ControllersContainerProps) => {\n    return (\n        <div className={controllers_container}>\n            <FontSizeController />\n            <SpeedController />\n        </div>\n    );\n};\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\n\nimport { ReadingWordLine, stateStore } from \"@aspects/stores\";\n\nimport {\n    // @ts-ignore\n    text_line, // @ts-ignore\n    input_text,\n} from \"./text-line.module.css\";\n\nexport type TextLineProps = { line: ReadingWordLine };\n\nexport const TextLine = observer((props: TextLineProps) => {\n    const { line } = props;\n    const { highlightClassIndex } = stateStore;\n\n    return (\n        <div className={text_line}>\n            {line.map((word) => (\n                <span data-dynamic-text className={input_text} key={word.index}>\n                    <span\n                        style={\n                            highlightClassIndex === word.index\n                                ? { backgroundColor: \"yellow\" }\n                                : {}\n                        }\n                        id={`word-${word.index}`}\n                    >\n                        {word.text}\n                    </span>\n                    &nbsp;\n                </span>\n            ))}\n            {/* <hr /> */}\n        </div>\n    );\n});\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\n\nimport { stateStore } from \"@aspects/stores\";\n\nimport { TextLine } from \"./components\";\n\nimport {\n    // @ts-ignore\n    reading_text_container,\n} from \"./reading-text-container.module.css\";\n\nexport type ReadingTextContainerProps = {};\n\nexport const ReadingTextContainer = observer(\n    (props: ReadingTextContainerProps) => {\n        const { readingTextWords } = stateStore;\n\n        return (\n            <div className={reading_text_container}>\n                {readingTextWords.map((line, index) => (\n                    <TextLine line={line} key={`Line-${index}`} />\n                ))}\n            </div>\n        );\n    }\n);\n","import React, { ChangeEvent } from \"react\";\nimport { action } from \"mobx\";\nimport { observer } from \"mobx-react\";\nimport { stateStore } from \"@aspects/stores\";\n\n// @ts-ignore\nimport { text_card_body } from \"./text-card-body.module.css\";\nimport { ReadingTextContainer } from \"./components\";\n\nexport type TextCardBodyProps = {};\n\nexport const TextCardBody = observer((props: TextCardBodyProps) => {\n  const { showTextarea } = stateStore;\n\n  const onTextareaChange = action((event: ChangeEvent<HTMLTextAreaElement>) => {\n    stateStore.textareaText = event.target.value;\n  });\n\n  return (\n    <div className={text_card_body}>\n      {showTextarea ? (\n        <textarea value={stateStore.textareaText} onChange={onTextareaChange} rows={4} cols={50} />\n      ) : (\n        <ReadingTextContainer />\n      )}\n    </div>\n  );\n});\n","import React from \"react\";\nimport { action } from \"mobx\";\nimport { observer } from \"mobx-react\";\n\n// @ts-ignore\nimport { delete_text, selected } from \"./delete-text.module.css\";\nimport { stateStore } from \"@aspects/stores\";\n\nexport type DeleteTextProps = {};\n\nconst newText = action(() => {\n    stateStore.showTextarea = true;\n    // stateStore.textareaText = \"\";\n});\n\nexport const DeleteText = observer((props: DeleteTextProps) => {\n    const { showTextarea } = stateStore;\n\n    return (\n        <div\n            onClick={newText}\n            className={`${delete_text} ${showTextarea ? selected : \"\"}`}\n        >\n            <span>טקסט חדש</span>\n        </div>\n    );\n});\n","import React from \"react\";\nimport { action } from \"mobx\";\nimport { observer } from \"mobx-react\";\n\n// @ts-ignore\nimport { selected, start_read } from \"./start-read.module.css\";\nimport { stateStore } from \"@aspects/stores\";\nimport { start } from \"@aspects/actions\";\n\nexport type StartReadProps = {};\n\nconst startRead = action(() => {\n    stateStore.showTextarea = false;\n    start();\n});\n\nexport const StartRead = observer((props: StartReadProps) => {\n\n    const { showTextarea } = stateStore;\n    return (\n        <div\n            onClick={startRead}\n            className={`${start_read} ${showTextarea ? \"\" : selected}`}\n        >\n            <span>התחל קריאה</span>\n        </div>\n    );\n});\n","import React from \"react\";\n\n// @ts-ignore\nimport { functional_buttons_container } from \"./functional-buttons-container.module.css\";\n\nimport { DeleteText, StartRead } from \"./components\";\n\nexport type FunctionalButtonsContainerProps = {};\n\nexport const FunctionalButtonsContainer = (\n  props: FunctionalButtonsContainerProps\n) => {\n  return (\n    <div className={functional_buttons_container}>\n      <DeleteText />\n      <StartRead />\n    </div>\n  );\n};\n","import React from \"react\";\n\n// @ts-ignore\nimport { functional_buttons } from \"./functional-buttons.module.css\";\n\nimport { FunctionalButtonsContainer } from \"./components\";\n\nexport type FunctionalButtonsProps = {};\n\nexport const FunctionalButtons = (props: FunctionalButtonsProps) => {\n  return (\n    <div className={functional_buttons}>\n      <FunctionalButtonsContainer />\n    </div>\n  );\n};\n","import React from \"react\";\n\n// @ts-ignore\nimport { text_card } from \"./text-card.module.css\";\n\nimport { TextCardHeader, TextCardBody, FunctionalButtons } from \"./components\";\n\nexport type TextCardProps = {};\n\nexport const TextCard = (props: TextCardProps) => {\n    return (\n        <div className={text_card}>\n            {/* <TextCardHeader /> */}\n            <TextCardBody />\n            <FunctionalButtons />\n        </div>\n    );\n};\n","import React from \"react\";\n\n// @ts-ignore\nimport { app } from \"./app.module.css\";\n\nimport { TopHeader, ControllersContainer, TextCard } from \"./components\";\n\nexport type appProps = {};\n\nexport const App = (props: appProps) => {\n    return (\n        <div className={app}>\n            <TopHeader />\n            <ControllersContainer />\n            <TextCard />\n        </div>\n    );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nimport { App } from \"./components/app\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorkerRegistration.register();\nreportWebVitals(console.log);\n"],"sourceRoot":""}